//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from grammar/BBSCodeParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Casasoft.BBS.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class BBSCodeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SEA_WS=1, EntityRef=2, TAG_OPEN=3, BBS_TEXT=4, ENTITY_NAME=5, TAG_CLOSE=6, 
		TAG_SLASH_CLOSE=7, TAG_SLASH=8, TAG_EQUALS=9, TAG_NAME=10, TAG_WHITESPACE=11, 
		ATTVALUE_VALUE=12, ATTRIBUTE=13;
	public const int
		RULE_bbsCodeEntity = 0, RULE_bbsCodeElement = 1, RULE_bbsCodeContent = 2, 
		RULE_bbsCodeAttribute = 3, RULE_bbsCodeAttributeName = 4, RULE_bbsCodeAttributeValue = 5, 
		RULE_bbsCodeTagName = 6, RULE_bbsCodeChardata = 7;
	public static readonly string[] ruleNames = {
		"bbsCodeEntity", "bbsCodeElement", "bbsCodeContent", "bbsCodeAttribute", 
		"bbsCodeAttributeName", "bbsCodeAttributeValue", "bbsCodeTagName", "bbsCodeChardata"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'{'", null, null, "'}'", "'/}'", "'/'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEA_WS", "EntityRef", "TAG_OPEN", "BBS_TEXT", "ENTITY_NAME", "TAG_CLOSE", 
		"TAG_SLASH_CLOSE", "TAG_SLASH", "TAG_EQUALS", "TAG_NAME", "TAG_WHITESPACE", 
		"ATTVALUE_VALUE", "ATTRIBUTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BBSCodeParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BBSCodeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BBSCodeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BBSCodeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class BbsCodeEntityContext : ParserRuleContext {
		public ITerminalNode EntityRef() { return GetToken(BBSCodeParser.EntityRef, 0); }
		public BbsCodeEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bbsCodeEntity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.EnterBbsCodeEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.ExitBbsCodeEntity(this);
		}
	}

	[RuleVersion(0)]
	public BbsCodeEntityContext bbsCodeEntity() {
		BbsCodeEntityContext _localctx = new BbsCodeEntityContext(Context, State);
		EnterRule(_localctx, 0, RULE_bbsCodeEntity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16; Match(EntityRef);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BbsCodeElementContext : ParserRuleContext {
		public ITerminalNode[] TAG_OPEN() { return GetTokens(BBSCodeParser.TAG_OPEN); }
		public ITerminalNode TAG_OPEN(int i) {
			return GetToken(BBSCodeParser.TAG_OPEN, i);
		}
		public BbsCodeTagNameContext[] bbsCodeTagName() {
			return GetRuleContexts<BbsCodeTagNameContext>();
		}
		public BbsCodeTagNameContext bbsCodeTagName(int i) {
			return GetRuleContext<BbsCodeTagNameContext>(i);
		}
		public ITerminalNode[] TAG_CLOSE() { return GetTokens(BBSCodeParser.TAG_CLOSE); }
		public ITerminalNode TAG_CLOSE(int i) {
			return GetToken(BBSCodeParser.TAG_CLOSE, i);
		}
		public BbsCodeContentContext bbsCodeContent() {
			return GetRuleContext<BbsCodeContentContext>(0);
		}
		public ITerminalNode TAG_SLASH() { return GetToken(BBSCodeParser.TAG_SLASH, 0); }
		public BbsCodeAttributeContext[] bbsCodeAttribute() {
			return GetRuleContexts<BbsCodeAttributeContext>();
		}
		public BbsCodeAttributeContext bbsCodeAttribute(int i) {
			return GetRuleContext<BbsCodeAttributeContext>(i);
		}
		public ITerminalNode TAG_SLASH_CLOSE() { return GetToken(BBSCodeParser.TAG_SLASH_CLOSE, 0); }
		public BbsCodeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bbsCodeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.EnterBbsCodeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.ExitBbsCodeElement(this);
		}
	}

	[RuleVersion(0)]
	public BbsCodeElementContext bbsCodeElement() {
		BbsCodeElementContext _localctx = new BbsCodeElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_bbsCodeElement);
		int _la;
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18; Match(TAG_OPEN);
				State = 19; bbsCodeTagName();
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TAG_NAME) {
					{
					{
					State = 20; bbsCodeAttribute();
					}
					}
					State = 25;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 26; Match(TAG_CLOSE);
				State = 27; bbsCodeContent();
				State = 28; Match(TAG_OPEN);
				State = 29; Match(TAG_SLASH);
				State = 30; bbsCodeTagName();
				State = 31; Match(TAG_CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33; Match(TAG_OPEN);
				State = 34; bbsCodeTagName();
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TAG_NAME) {
					{
					{
					State = 35; bbsCodeAttribute();
					}
					}
					State = 40;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 41; Match(TAG_SLASH_CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 43; Match(TAG_OPEN);
				State = 44; bbsCodeTagName();
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TAG_NAME) {
					{
					{
					State = 45; bbsCodeAttribute();
					}
					}
					State = 50;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 51; Match(TAG_CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BbsCodeContentContext : ParserRuleContext {
		public BbsCodeChardataContext[] bbsCodeChardata() {
			return GetRuleContexts<BbsCodeChardataContext>();
		}
		public BbsCodeChardataContext bbsCodeChardata(int i) {
			return GetRuleContext<BbsCodeChardataContext>(i);
		}
		public BbsCodeElementContext[] bbsCodeElement() {
			return GetRuleContexts<BbsCodeElementContext>();
		}
		public BbsCodeElementContext bbsCodeElement(int i) {
			return GetRuleContext<BbsCodeElementContext>(i);
		}
		public BbsCodeEntityContext[] bbsCodeEntity() {
			return GetRuleContexts<BbsCodeEntityContext>();
		}
		public BbsCodeEntityContext bbsCodeEntity(int i) {
			return GetRuleContext<BbsCodeEntityContext>(i);
		}
		public BbsCodeContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bbsCodeContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.EnterBbsCodeContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.ExitBbsCodeContent(this);
		}
	}

	[RuleVersion(0)]
	public BbsCodeContentContext bbsCodeContent() {
		BbsCodeContentContext _localctx = new BbsCodeContentContext(Context, State);
		EnterRule(_localctx, 4, RULE_bbsCodeContent);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEA_WS || _la==BBS_TEXT) {
				{
				State = 55; bbsCodeChardata();
				}
			}

			State = 67;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 60;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case TAG_OPEN:
						{
						State = 58; bbsCodeElement();
						}
						break;
					case EntityRef:
						{
						State = 59; bbsCodeEntity();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 63;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SEA_WS || _la==BBS_TEXT) {
						{
						State = 62; bbsCodeChardata();
						}
					}

					}
					} 
				}
				State = 69;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BbsCodeAttributeContext : ParserRuleContext {
		public BbsCodeAttributeNameContext bbsCodeAttributeName() {
			return GetRuleContext<BbsCodeAttributeNameContext>(0);
		}
		public ITerminalNode TAG_EQUALS() { return GetToken(BBSCodeParser.TAG_EQUALS, 0); }
		public BbsCodeAttributeValueContext bbsCodeAttributeValue() {
			return GetRuleContext<BbsCodeAttributeValueContext>(0);
		}
		public BbsCodeAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bbsCodeAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.EnterBbsCodeAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.ExitBbsCodeAttribute(this);
		}
	}

	[RuleVersion(0)]
	public BbsCodeAttributeContext bbsCodeAttribute() {
		BbsCodeAttributeContext _localctx = new BbsCodeAttributeContext(Context, State);
		EnterRule(_localctx, 6, RULE_bbsCodeAttribute);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; bbsCodeAttributeName();
				State = 71; Match(TAG_EQUALS);
				State = 72; bbsCodeAttributeValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; bbsCodeAttributeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BbsCodeAttributeNameContext : ParserRuleContext {
		public ITerminalNode TAG_NAME() { return GetToken(BBSCodeParser.TAG_NAME, 0); }
		public BbsCodeAttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bbsCodeAttributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.EnterBbsCodeAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.ExitBbsCodeAttributeName(this);
		}
	}

	[RuleVersion(0)]
	public BbsCodeAttributeNameContext bbsCodeAttributeName() {
		BbsCodeAttributeNameContext _localctx = new BbsCodeAttributeNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_bbsCodeAttributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(TAG_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BbsCodeAttributeValueContext : ParserRuleContext {
		public ITerminalNode ATTVALUE_VALUE() { return GetToken(BBSCodeParser.ATTVALUE_VALUE, 0); }
		public BbsCodeAttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bbsCodeAttributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.EnterBbsCodeAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.ExitBbsCodeAttributeValue(this);
		}
	}

	[RuleVersion(0)]
	public BbsCodeAttributeValueContext bbsCodeAttributeValue() {
		BbsCodeAttributeValueContext _localctx = new BbsCodeAttributeValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_bbsCodeAttributeValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(ATTVALUE_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BbsCodeTagNameContext : ParserRuleContext {
		public ITerminalNode TAG_NAME() { return GetToken(BBSCodeParser.TAG_NAME, 0); }
		public BbsCodeTagNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bbsCodeTagName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.EnterBbsCodeTagName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.ExitBbsCodeTagName(this);
		}
	}

	[RuleVersion(0)]
	public BbsCodeTagNameContext bbsCodeTagName() {
		BbsCodeTagNameContext _localctx = new BbsCodeTagNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_bbsCodeTagName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(TAG_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BbsCodeChardataContext : ParserRuleContext {
		public ITerminalNode BBS_TEXT() { return GetToken(BBSCodeParser.BBS_TEXT, 0); }
		public ITerminalNode SEA_WS() { return GetToken(BBSCodeParser.SEA_WS, 0); }
		public BbsCodeChardataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bbsCodeChardata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.EnterBbsCodeChardata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBBSCodeParserListener typedListener = listener as IBBSCodeParserListener;
			if (typedListener != null) typedListener.ExitBbsCodeChardata(this);
		}
	}

	[RuleVersion(0)]
	public BbsCodeChardataContext bbsCodeChardata() {
		BbsCodeChardataContext _localctx = new BbsCodeChardataContext(Context, State);
		EnterRule(_localctx, 14, RULE_bbsCodeChardata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_la = TokenStream.LA(1);
			if ( !(_la==SEA_WS || _la==BBS_TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', 'X', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\x18', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x1B', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\'', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '*', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x31', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\x34', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x38', '\n', '\x3', '\x3', '\x4', '\x5', '\x4', ';', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '?', '\n', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x42', '\n', '\x4', '\a', '\x4', '\x44', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', 'G', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'N', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x2', '\x2', '\n', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x2', '\x3', '\x4', '\x2', '\x3', 
		'\x3', '\x6', '\x6', '\x2', 'Y', '\x2', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x37', '\x3', '\x2', '\x2', '\x2', '\x6', ':', '\x3', '\x2', '\x2', 
		'\x2', '\b', 'M', '\x3', '\x2', '\x2', '\x2', '\n', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'Q', '\x3', '\x2', '\x2', '\x2', '\xE', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'U', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x13', '\a', '\x4', '\x2', '\x2', '\x13', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x15', '\a', '\x5', '\x2', '\x2', '\x15', '\x19', '\x5', 
		'\xE', '\b', '\x2', '\x16', '\x18', '\x5', '\b', '\x5', '\x2', '\x17', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '\b', '\x2', 
		'\x2', '\x1D', '\x1E', '\x5', '\x6', '\x4', '\x2', '\x1E', '\x1F', '\a', 
		'\x5', '\x2', '\x2', '\x1F', ' ', '\a', '\n', '\x2', '\x2', ' ', '!', 
		'\x5', '\xE', '\b', '\x2', '!', '\"', '\a', '\b', '\x2', '\x2', '\"', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\x5', '\x2', '\x2', 
		'$', '(', '\x5', '\xE', '\b', '\x2', '%', '\'', '\x5', '\b', '\x5', '\x2', 
		'&', '%', '\x3', '\x2', '\x2', '\x2', '\'', '*', '\x3', '\x2', '\x2', 
		'\x2', '(', '&', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', 
		'\x2', ')', '+', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', 
		'\x2', '+', ',', '\a', '\t', '\x2', '\x2', ',', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\a', '\x5', '\x2', '\x2', '.', '\x32', '\x5', 
		'\xE', '\b', '\x2', '/', '\x31', '\x5', '\b', '\x5', '\x2', '\x30', '/', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x35', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\b', '\x2', '\x2', 
		'\x36', '\x38', '\x3', '\x2', '\x2', '\x2', '\x37', '\x14', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '#', '\x3', '\x2', '\x2', '\x2', '\x37', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x5', '\x3', '\x2', '\x2', '\x2', '\x39', 
		';', '\x5', '\x10', '\t', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', 
		':', ';', '\x3', '\x2', '\x2', '\x2', ';', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '<', '?', '\x5', '\x4', '\x3', '\x2', '=', '?', '\x5', '\x2', '\x2', 
		'\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '=', '\x3', '\x2', '\x2', 
		'\x2', '?', '\x41', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\x5', '\x10', 
		'\t', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '>', '\x3', '\x2', '\x2', '\x2', '\x44', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\a', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x5', '\n', '\x6', '\x2', 'I', 
		'J', '\a', '\v', '\x2', '\x2', 'J', 'K', '\x5', '\f', '\a', '\x2', 'K', 
		'N', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\x5', '\n', '\x6', '\x2', 
		'M', 'H', '\x3', '\x2', '\x2', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', '\t', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '\f', '\x2', '\x2', 
		'P', '\v', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '\xE', '\x2', '\x2', 
		'R', '\r', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\f', '\x2', '\x2', 
		'T', '\xF', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\t', '\x2', '\x2', 
		'\x2', 'V', '\x11', '\x3', '\x2', '\x2', '\x2', '\v', '\x19', '(', '\x32', 
		'\x37', ':', '>', '\x41', '\x45', 'M',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Casasoft.BBS.Parser
